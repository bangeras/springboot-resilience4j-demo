server.port=8091

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

management.health.circuitbreakers.enabled=true
#management.health.ratelimiters.enabled=true


#This will configure the CircuitBreaker to have a COUNT_BASED sliding window with a size of 10, the evaluation will happen after the first 5 calls are done and we?ll wait 5 seconds in OPEN state
# and the failure threshold is set to 50% meaning that out of 10 requests, if 5 fails, the CircuitBreaker will open.
#Since if the CircuitBreaker is open, Resilience4J will throw a CallNotPermittedException which in the default case, Spring will translate into an HTTP 500.
# The test we wrote above expects that after the failure threshold is hit, the server will respond with an HTTP 503 ? Service Unavailable

resilience4j.circuitbreaker.instances.externalApi.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.externalApi.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.externalApi.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.externalApi.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.externalApi.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.externalApi.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.externalApi.sliding-window-size=10


#retry for a maximum of three attempts, each with a delay of 1s.
resilience4j.retry.metrics.enabled=true
resilience4j.retry.instances.externalApi.max-attempts=3
resilience4j.retry.instances.externalApi.wait-duration=1s
resilience4j.retry.metrics.legacy.enabled=true


#the threshold value is set to 2s. After that, the Resilience4j library internally cancels the async operation with a TimeoutException.
# So we'll add a handler for this exception in the ApiExceptionHandler class to return an API response with the 408 HTTP status code
resilience4j.timelimiter.metrics.enabled=true
resilience4j.timelimiter.instances.externalApi.timeout-duration=2s
resilience4j.timelimiter.instances.externalApi.cancel-running-future=true

# we want to limit the maximum number of concurrent calls to three, so each thread can wait for only 1ms if the bulkhead is full.
# After that, the requests will be rejected with the BulkheadFullException exception
resilience4j.bulkhead.metrics.enabled=true
resilience4j.bulkhead.instances.externalApi.max-concurrent-calls=3
resilience4j.bulkhead.instances.externalApi.max-wait-duration=1


# we want to limit the API calling rate to 5 req/min without waiting. After reaching the threshold for the allowed rate, requests will be rejected with the RequestNotPermitted exception
resilience4j.ratelimiter.metrics.enabled=true
resilience4j.ratelimiter.instances.externalApi.register-health-indicator=true
resilience4j.ratelimiter.instances.externalApi.limit-for-period=5
resilience4j.ratelimiter.instances.externalApi.limit-refresh-period=60s
resilience4j.ratelimiter.instances.externalApi.timeout-duration=0s
resilience4j.ratelimiter.instances.externalApi.allow-health-indicator-to-fail=true
resilience4j.ratelimiter.instances.externalApi.subscribe-for-events=true
resilience4j.ratelimiter.instances.externalApi.event-consumer-buffer-size=50